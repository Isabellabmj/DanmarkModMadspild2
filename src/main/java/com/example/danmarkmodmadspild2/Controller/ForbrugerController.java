package com.example.danmarkmodmadspild2.Controller;

import com.example.danmarkmodmadspild2.Model.Opskrift;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;

import java.util.ArrayList;
import java.util.List;

@Controller
public class ForbrugerController
{

    @GetMapping("/forbruger/koeleskab")
    public String visKoeleskabsside()
    {
        return "forbruger/koeleskab";
    }


    @PostMapping("/find-opskrifter")
    public String findOpskrifter(@RequestParam List<String> ingredienser, Model model)
    {
        List<String> forbrugerIndtast = new ArrayList<>();

        for (String i : ingredienser) //Vi genneg√•r listen af de indtastede ingredienser
        {
            if (i != null && !i.trim().isEmpty()) //fjerner tomme felter og mellemrum
            {
                forbrugerIndtast.add(i.trim().toLowerCase()); //Vi gemmer alt i en ny liste
            }
        }

        List<Opskrift> opskrifter = new ArrayList<>();  //En tom liste, som vi vil fylde med matchende opskrifter, hvis betingelserne nedenfor opfyldes.

        // Er lavet uden r√•vare objekter, kan tilf√∏jes hvis tid
        if (forbrugerIndtast.contains("hvidl√∏g") && forbrugerIndtast.contains("l√∏g") && forbrugerIndtast.contains("tomat"))
        {
            opskrifter.add(new Opskrift(
                    "Pasta Arrabiata",
                    null,// Vi kan tilf√∏je ingredienser her senere
                    "/images/forbruger/pastaArrabiata.png",
                    "En krydret italiensk pastaret med hvidl√∏g, chili og tomat. Perfekt med friskrevet parmesan og lidt basilikum."
            ));
        }

        if (forbrugerIndtast.contains("√¶g") && forbrugerIndtast.contains("purl√∏g"))
        {
            opskrifter.add(new Opskrift(
                    "Omelet med √¶g og purl√∏g",
                    null,
                    "/images/forbruger/omelet.png",
                    "L√¶kker r√∏r√¶g med purl√∏g..."
            ));
        }

        if (opskrifter.isEmpty())
        {
            model.addAttribute("resultat", "Vi fandt ingen matchende opskrifter ‚Äì pr√∏v med nogle andre ingredienser üçΩÔ∏è");
        }
        else
        {
            model.addAttribute("opskrifter", opskrifter);
        }

        return "forbruger/koeleskab";
    }

    /*@PostMapping("/find-opskrifter")
    public String findOpskrifter(@RequestParam String ingredienser, Model model)
    {
        // Simpel logik ‚Äì her kan vi senere udvide med √¶gte matches
        model.addAttribute("resultat", "Her er dine resultater baseret p√•: " + ingredienser);
        return "forbruger/koeleskab";
    }*/

   /* @PostMapping("/find-opskrifter")
    public String findOpskrifter(@RequestParam List<String> ingredienser, Model model)
    {
        List<String> forbrugerIndtast = new ArrayList<>();

        for (String i : ingredienser)
        {
            if (i != null && !i.trim().isEmpty()) //trim, vi fjerner mellemrum f√∏r/efter teksten s√• der ikke kommer fejl fx: " Chorizo" og (isEmpty) feltet ikke er tomt
            {
                forbrugerIndtast.add(i.trim().toLowerCase()); //toLowerCase, vi g√∏r alt sm√•t
            }
        }

        List<String> forslag = new ArrayList<>();

        if (forbrugerIndtast.contains("√¶g") && forbrugerIndtast.contains("purl√∏g"))
        {
            forslag.add("Omelet med √¶g og purl√∏g");
        }

        if (forbrugerIndtast.contains("chorizo"))
        {
            forslag.add("Chorizo pasta med tomatsovs");
        }

        if (forbrugerIndtast.contains("√¶g") && forbrugerIndtast.contains("chorizo"))
        {
            forslag.add("Chorizo scramble ‚Äì √¶g med chorizo");
        }

        if(forbrugerIndtast.contains("hvidl√∏g") && forbrugerIndtast.contains("l√∏g") && forbrugerIndtast.contains("hakket tomat") && forbrugerIndtast.contains("chili") && forbrugerIndtast.contains("olivenolie"))
        {
            forslag.add("Pasta arrabiata - \n + En krydret italiensk pastaret med hvidl√∏g, chili og tomat. Perfekt med friskrevet parmesan og lidt basilikum.\",\n" +
                    "        \"/images/forbruger/pastaArrabiata.png");
        }



        /*if (antalMatch(forbrugerIndtast, List.of("hvidl√∏g", "l√∏g", "hakket tomat", "chili", "olivenolie")) >= 3)
        {
            forslag.add("Pasta arrabiata");
        }*/ //Hvis der kun skulle 3 ingredienser til en ret, ved ikke om det giver mening

        //vi mangler en metode der skelner mellem de forskellige opskrifter hvis den b√•de indeholder √¶g og chorizo.

       /* if (forslag.isEmpty())
        {
            model.addAttribute("resultat", "Vi fandt ingen matchende opskrifter ‚Äì pr√∏v med nogle andre ingredienser");
        } else
        {
            model.addAttribute("forslag", forslag);
        }

        return "forbruger/koeleskab";
    }

   /* private int antalMatch(List<String> brugerIngredienser, List<String> kravIngredienser)
    {
        int count = 0;
        for (String krav : kravIngredienser)
        {
            if (brugerIngredienser.contains(krav))
            {
                count++;
            }
        }
        return count;
    }*/ // antalMatch metode



    //Hvis vi skulle f√• k√∏leskabsfunktionen til at virke skulle vi tilf√∏je en database og en get metode til at hente opskrifter
    //der er baseret p√• de ingredienser der bliver skrevet ind i felterne.*/

}
